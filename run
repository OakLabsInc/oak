#!/usr/bin/env electron

const { resolve, join } = require('path')
const corePath = join(__dirname, 'lib', 'core.js')
const { dialog } = require('electron')
const oak = require(corePath)
const program = require('commander')
const { version } = require(join(__dirname, 'package.json'))

// we are (ideally) running without popups, so we will ignore the popup box for JS errors
dialog.showErrorBox = (title, err) => {
  return
}

// take on uncaughtExceptions, emit them to the logger
process.on('uncaughtException', e => {
  oak.message.emit('logger.error', {
    event: 'uncaughtException',
    err: e
  })
})

let appPath = join(__dirname, 'default')

program
  .version(version)
  .arguments('<path>')
  .action(function (path) {
    if (path) {
      appPath = path
    }
  })
  .parse(process.argv)

if (isURL(appPath)) {
  oak.on('ready', () => oak.load({ url: appPath }))
} else {
  require(resolve(appPath))
}

function isURL (value) {
  return /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(value)
}
